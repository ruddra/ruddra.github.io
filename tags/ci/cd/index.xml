<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CI/CD on Ruddra</title><link>https://ruddra.com/tags/ci/cd/</link><description>Recent content in CI/CD on Ruddra</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://ruddra.com/tags/ci/cd/index.xml" rel="self" type="application/rss+xml"/><item><title>Run a Build in AWS CodeBuild When a Git Tag is Pushed</title><link>https://ruddra.com/aws-codebuild-use-git-tags/</link><pubDate>Thu, 16 Apr 2020 20:19:01 +0600</pubDate><guid>https://ruddra.com/aws-codebuild-use-git-tags/</guid><description>AWS CodeBuild has nice integration with different Git repository hosting service providers(like GitHub, BitBucket, even amazon&amp;rsquo;s own CodeCommit etc). Even using WebHook is pretty easy. You can start a build in CodeBuild for every push, pull, PR created, PR merged etc. But it can be bit tricky when it comes to trigger for every tag push only, as it us not a default event type provided by CodeBuild.</description></item><item><title>Hugo: Deploy Static Site using GitHub Actions</title><link>https://ruddra.com/hugo-deploy-static-page-using-github-actions/</link><pubDate>Fri, 06 Mar 2020 00:59:54 +0600</pubDate><guid>https://ruddra.com/hugo-deploy-static-page-using-github-actions/</guid><description>If you are using Hugo to generate static pages, you are familiar with CLI commands which are to build the static pages in your local machine and make push to your &amp;lt;username&amp;gt;.github.io repository. When it comes to using Hugo for blogging, compared to platforms like Medium or WordPress, it is very painful because you do not have any web interface to make changes whenever you want or wherever you want.</description></item><item><title>Use Docker for Accessing Database in AWS CodeBuild</title><link>https://ruddra.com/aws-codebuild-use-database/</link><pubDate>Fri, 31 Jan 2020 19:08:29 +0600</pubDate><guid>https://ruddra.com/aws-codebuild-use-database/</guid><description>AWS CodeBuild is an extraordinary tool for building your code. Recently I have been using it to build projects and store docker images in AWS ECR. During those CodeBuild processes, I needed Database for running tests. As the need of the Database was for a limited time and I didn&amp;rsquo;t want to pay extra for it(that is why I did not use AWS RDS), I decided to create database using docker inside CodeBuild.</description></item><item><title>Deploy Django App in Sub Directory Using OpenShift</title><link>https://ruddra.com/deploy-django-subpath-openshift/</link><pubDate>Wed, 24 Apr 2019 20:36:44 +0600</pubDate><guid>https://ruddra.com/deploy-django-subpath-openshift/</guid><description>When you are using OpenShift, you will be using routes to expose a route from a service. Let&amp;rsquo;s say you want to expose a path in example.com/dummy. When you do that for a django application(without any reverse proxy server), it usually becomes a problem, because the sub directory does not work well with Django&amp;rsquo;s urls.</description></item><item><title>Automated Deployment to OpenShift Using Jenkins and Webhook</title><link>https://ruddra.com/openshift-python-pipeline-deployment/</link><pubDate>Sun, 12 Aug 2018 16:45:42 +0000</pubDate><guid>https://ruddra.com/openshift-python-pipeline-deployment/</guid><description>The last post was about defining the pipelines. Now it is time to execute them. Also, at the end, we are going to show how to integrate webhook in your repository, so that for a specific event(like Push, Pull request merge etc) it will trigger the pipelines to automatically deploy the latest code to servers.</description></item><item><title>Deploy A Python App to OpenShift: Planning and Preparations</title><link>https://ruddra.com/openshift-python-pipeline-preparation/</link><pubDate>Sat, 11 Aug 2018 15:09:01 +0000</pubDate><guid>https://ruddra.com/openshift-python-pipeline-preparation/</guid><description>Deploying a Python application to OpenShift is fairly easy. Write a Dockerfile and run oc new-app /path/to/Dockerfile, that&amp;rsquo;s it!! But if you want implement a full fledged modern CI/CD using Jenkins and openshift, you need to do little more than that. So let&amp;rsquo;s dive into it.
We will explain about the whole process in three articles:</description></item><item><title>Deploy Django to OpenShift Using Jenkins Pipeline(CI/CD)</title><link>https://ruddra.com/django-openshift-pipeline/</link><pubDate>Sun, 22 Jul 2018 17:51:20 +0000</pubDate><guid>https://ruddra.com/django-openshift-pipeline/</guid><description>Using Jenkins pipeline, you can easily automate your deployments in openshift. In this post, we are going to use this powerful tool to deploy a Django project. But before we start, one thing I need to mention is that, this project has been tested on in Minishift 1.2.0, OpenShift v3.9.0 and Kubernetes v1.</description></item><item><title>Deploy Django to OpenShift 3 Powered by MySQL and Gunicorn</title><link>https://ruddra.com/deploy-django-to-openshift-3/</link><pubDate>Sat, 24 Feb 2018 13:32:11 +0000</pubDate><guid>https://ruddra.com/deploy-django-to-openshift-3/</guid><description>If you want to use OpenShift for deploying Django, you can follow this post and simply do that. You don&amp;rsquo;t need to learn Kubernetes. We will use docker file only. No other fancy stuff.
Also, before starting, I am also hoping you are little bit familiar with OpenShift 3 and oc tools.</description></item></channel></rss>