<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gunicorn on Coding Blog By Arnab Kumar Shil</title><link>https://ruddra.com/tags/gunicorn/</link><description>Recent content in Gunicorn on Coding Blog By Arnab Kumar Shil</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sat, 11 Aug 2018 15:09:01 +0000</lastBuildDate><atom:link href="https://ruddra.com/tags/gunicorn/index.xml" rel="self" type="application/rss+xml"/><item><title>Deploy A Python App to OpenShift: Planning and Preparations</title><link>https://ruddra.com/openshift-python-pipeline-preparation/</link><pubDate>Sat, 11 Aug 2018 15:09:01 +0000</pubDate><guid>https://ruddra.com/openshift-python-pipeline-preparation/</guid><description>Deploying a Python application to OpenShift is fairly easy. Write a Dockerfile and run oc new-app /path/to/Dockerfile, that&amp;rsquo;s it!! But if you want implement a full fledged modern CI/CD using Jenkins and openshift, you need to do little more than that. So let&amp;rsquo;s dive into it.
We will explain about the whole process in three articles:</description></item><item><title>Deploy Django to OpenShift Using Jenkins Pipeline(CI/CD)</title><link>https://ruddra.com/django-openshift-pipeline/</link><pubDate>Sun, 22 Jul 2018 17:51:20 +0000</pubDate><guid>https://ruddra.com/django-openshift-pipeline/</guid><description>Using Jenkins pipeline, you can easily automate your deployments in openshift. In this post, we are going to use this powerful tool to deploy a Django project. But before we start, one thing I need to mention is that, this project has been tested on in Minishift 1.2.0, OpenShift v3.9.0 and Kubernetes v1.</description></item><item><title>Deploy Django to OpenShift 3 Powered by MySQL and Gunicorn</title><link>https://ruddra.com/deploy-django-to-openshift-3/</link><pubDate>Sat, 24 Feb 2018 13:32:11 +0000</pubDate><guid>https://ruddra.com/deploy-django-to-openshift-3/</guid><description>If you want to use OpenShift for deploying Django, you can follow this post and simply do that. You don&amp;rsquo;t need to learn Kubernetes. We will use docker file only. No other fancy stuff.
Also, before starting, I am also hoping you are little bit familiar with OpenShift 3 and oc tools.</description></item><item><title>Docker: Use Celery in Django(Redis as Broker)</title><link>https://ruddra.com/docker-do-stuff-using-celery-using-redis-as-broker/</link><pubDate>Mon, 14 Nov 2016 15:43:31 +0000</pubDate><guid>https://ruddra.com/docker-do-stuff-using-celery-using-redis-as-broker/</guid><description>In previous two posts, we have deployed Django with Postgres, Nginx, now its time to do some async stuff using Celery. In this post, I will do the magic tricks first, explain them later.Table of contents&amp;nbsp; Add &amp;lsquo;Celery&amp;rsquo; to django Make a simple async task Explanations Need proof that this works</description></item><item><title>Deploy Django, Gunicorn, NGINX, Postgresql using Docker</title><link>https://ruddra.com/docker-django-nginx-postgres/</link><pubDate>Tue, 09 Aug 2016 13:47:22 +0000</pubDate><guid>https://ruddra.com/docker-django-nginx-postgres/</guid><description>This post mainly based on this article on docker documentation.
I will be extending this post by serving django+gunicorn using Nginx, also I will using Postgresql docker container to use it as database.Table of contents&amp;nbsp; Steps Create django project Add &amp;lsquo;requirement.pip&amp;rsquo; Create &amp;lsquo;Dockerfile&amp;rsquo; Install &amp;lsquo;docker-compose&amp;rsquo; Add configuration to &amp;lsquo;docker-compose.</description></item></channel></rss>