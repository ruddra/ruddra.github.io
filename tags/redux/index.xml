<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Redux on Ruddra</title><link>https://ruddra.com/tags/redux/<description>Recent content in Redux on Ruddra</description><generator>Hugo -- gohugo.io</generator><lastbuilddate>Fri, 14 Feb 2020 01:00:00 +0600</lastbuilddate><atom:link href="https://ruddra.com/tags/redux/index.xml" rel="self" type="application/rss+xml"><item><title>Maintain Authentication Layer from Redux Middleware Using React Router</title><link>https://ruddra.com/posts/reactjs-maintain-auth-layer-from-redux-middleware-router/<pubdate>Fri, 14 Feb 2020 01:00:00 +0600</pubdate><guid>https://ruddra.com/posts/reactjs-maintain-auth-layer-from-redux-middleware-router/</guid><description>Maintaining authentication layer in ReactJS can be painful. Back in the old days(even now-a-days), you needed to override every componentDidMount method in class based components to see if the user is authenticated. In the latest ReactJS, there are hooks(specially useEffect) where you need to write these checks. Either way, some codes will be redundant.</description></item><item><title>Control Application Flow from Redux Middleware using React Router 4</title><link>https://ruddra.com/posts/control-application-flow-from-redux-middleware/<pubdate>Fri, 12 Oct 2018 17:25:38 +0000</pubdate><guid>https://ruddra.com/posts/control-application-flow-from-redux-middleware/</guid><description>While developing application in ReactJs with Redux and React Router 4, what I felt is that, there is no direct relationship between application&amp;rsquo;s state and routing. We needed to create those connections inside Components. In each component, we needed to check application state and based on that we made decisions where to go next(if needed).</description></item></channel></rss>