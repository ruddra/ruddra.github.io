<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DevOps on Ruddra</title><link>https://ruddra.com/tags/devops/<description>Recent content in DevOps on Ruddra</description><generator>Hugo -- gohugo.io</generator><lastbuilddate>Thu, 16 Apr 2020 20:19:01 +0600</lastbuilddate><atom:link href="https://ruddra.com/tags/devops/index.xml" rel="self" type="application/rss+xml"><item><title>Run a Build in AWS CodeBuild When a Git Tag is Pushed</title><link>https://ruddra.com/posts/aws-codebuild-use-git-tags/<pubdate>Thu, 16 Apr 2020 20:19:01 +0600</pubdate><guid>https://ruddra.com/posts/aws-codebuild-use-git-tags/</guid><description>AWS CodeBuild has nice integration with different Git repository hosting service providers(like GitHub, BitBucket, even amazon&amp;rsquo;s own CodeCommit etc). Even using WebHook is pretty easy. You can start a build in CodeBuild for every push, pull, PR created, PR merged etc. But it can be bit tricky when it comes to trigger for every tag push only, as it us not a default event type provided by CodeBuild.</description></item><item><title>Use Docker for Accessing Database in AWS CodeBuild</title><link>https://ruddra.com/posts/aws-codebuild-use-database/<pubdate>Fri, 31 Jan 2020 19:08:29 +0600</pubdate><guid>https://ruddra.com/posts/aws-codebuild-use-database/</guid><description>AWS CodeBuild is an extraordinary tool for building your code. Recently I have been using it to build projects and store docker images in AWS ECR. During those CodeBuild processes, I needed Database for running tests. As the need of the Database was for a limited time and I didn&amp;rsquo;t want to pay extra for it(that is why I did not use AWS RDS), I decided to create database using docker inside CodeBuild.</description></item><item><title>Deploy Django App in Sub Directory Using OpenShift</title><link>https://ruddra.com/posts/deploy-django-subpath-openshift/<pubdate>Wed, 24 Apr 2019 20:36:44 +0600</pubdate><guid>https://ruddra.com/posts/deploy-django-subpath-openshift/</guid><description>When you are using OpenShift, you will be using routes to expose a route from a service. Let&amp;rsquo;s say you want to expose a path in example.com/dummy. When you do that for a django application(without any reverse proxy server), it usually becomes a problem, because the sub directory does not work well with Django&amp;rsquo;s urls.</description></item><item><title>Do Extra in S3 Using Django Storage and Boto3</title><link>https://ruddra.com/posts/aws-boto3-useful-functions/<pubdate>Sat, 06 Apr 2019 01:49:10 +0600</pubdate><guid>https://ruddra.com/posts/aws-boto3-useful-functions/</guid><description>Today, I am going to write about few useful snippets/functionalities which I have used for Amazon S3 or any S3 compitable storage using Boto3 and Django Storage. FYI, this post focuses on using S3 with Django. So without further ado, let us begin. Table of contents&amp;nbsp; Configuring S3 Using S3 which it does not belong to AWS Serve S3 in different domain(through cloudFront or varnish) Create new bucket See all buckets Change access control to a bucket Delete objects from a bucket(also bucket itself) Use different folders when storing media and static contents Make &amp;lsquo;collect static&amp;rsquo; faster Check ACL status In conclusion</description></item><item><title>Automated Deployment to OpenShift Using Jenkins and Webhook</title><link>https://ruddra.com/posts/openshift-python-gunicorn-nginx-jenkins-pipelines-part-three/<pubdate>Sun, 12 Aug 2018 16:45:42 +0000</pubdate><guid>https://ruddra.com/posts/openshift-python-gunicorn-nginx-jenkins-pipelines-part-three/</guid><description>The last post was about defining the pipelines. Now it is time to execute them. Also, at the end, we are going to show how to integrate webhook in your repository, so that for a specific event(like Push, Pull request merge etc) it will trigger the pipelines to automatically deploy the latest code to servers.</description></item><item><title>Writing Jenkins Pipeline For OpenShift Deployment</title><link>https://ruddra.com/posts/openshift-python-gunicorn-nginx-jenkins-pipelines-part-two/<pubdate>Sat, 11 Aug 2018 19:41:04 +0000</pubdate><guid>https://ruddra.com/posts/openshift-python-gunicorn-nginx-jenkins-pipelines-part-two/</guid><description>Pipeline is a set of instructions, which will be executed as per given sequence and produce a output. Jenkins Pipeline is simply writing these instructions in Jenkins. These pipelines can be written in Groovy. In previous post we have defined deployment structure and made necessary preparations for deployment of a python+gunicorn+nginx+jenkins based project.</description></item><item><title>Deploy A Python App to OpenShift: Planning and Preparations</title><link>https://ruddra.com/posts/openshift-python-gunicorn-nginx-jenkins-pipelines-part-one/<pubdate>Sat, 11 Aug 2018 15:09:01 +0000</pubdate><guid>https://ruddra.com/posts/openshift-python-gunicorn-nginx-jenkins-pipelines-part-one/</guid><description>Deploying a Python application to OpenShift is fairly easy. Write a Dockerfile and run oc new-app /path/to/Dockerfile, that&amp;rsquo;s it!! But if you want implement a full fledged modern CI/CD using Jenkins and openshift, you need to do little more than that. So let&amp;rsquo;s dive into it. We will explain about the whole process in three articles:</description></item><item><title>Deploy Django to OpenShift Using Jenkins Pipeline(CI/CD)</title><link>https://ruddra.com/posts/django-openshift-pipeline/<pubdate>Sun, 22 Jul 2018 17:51:20 +0000</pubdate><guid>https://ruddra.com/posts/django-openshift-pipeline/</guid><description>Using Jenkins pipeline, you can easily automate your deployments in openshift. In this post, we are going to use this powerful tool to deploy a Django project. But before we start, one thing I need to mention is that, this project has been tested on in Minishift 1.2.0, OpenShift v3.9.0 and Kubernetes v1.</description></item><item><title>Deploy Django to OpenShift 3 Powered by MySQL and Gunicorn</title><link>https://ruddra.com/posts/deploy-django-to-openshift-3/<pubdate>Sat, 24 Feb 2018 13:32:11 +0000</pubdate><guid>https://ruddra.com/posts/deploy-django-to-openshift-3/</guid><description>If you want to use OpenShift for deploying Django, you can follow this post and simply do that. You don&amp;rsquo;t need to learn Kubernetes. We will use docker file only. No other fancy stuff. Also, before starting, I am also hoping you are little bit familiar with OpenShift 3 and oc tools.</description></item></channel></rss>