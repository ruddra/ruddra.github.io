<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Models on Coding Blog By Arnab Kumar Shil</title><link>https://ruddra.com/tags/models/</link><description>Recent content in Models on Coding Blog By Arnab Kumar Shil</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sat, 26 Jan 2019 14:58:58 +0600</lastBuildDate><atom:link href="https://ruddra.com/tags/models/index.xml" rel="self" type="application/rss+xml"/><item><title>Django: Ordering by Linked List for Model Objects</title><link>https://ruddra.com/django-model-linked-list/</link><pubDate>Sat, 26 Jan 2019 14:58:58 +0600</pubDate><guid>https://ruddra.com/django-model-linked-list/</guid><description>Linked list is a data structure where each object has points to next. In django, linked list can provide an interesting solution when it comes to custom ordering/grouping issues.
Lets think of an example like this= you are making a blog site, and you have made a Post Model like this:</description></item><item><title>Django: Changing User Model in Mid-Project</title><link>https://ruddra.com/django-custom-user-migration-mid-phase-project/</link><pubDate>Thu, 03 Jan 2019 02:00:00 +0000</pubDate><guid>https://ruddra.com/django-custom-user-migration-mid-phase-project/</guid><description>Every now and then I see some questions pop up in StackOverflow with title:
ValueError: Related model &amp;lsquo;app.User&amp;rsquo; cannot be resolved
This is a very common issue and pops up when the user tries to run the migration. So, lets talk more about what is this problem and how can we solve it.</description></item><item><title>Make a Blog using Django Part 1</title><link>https://ruddra.com/make-a-blog-using-django-part-1/</link><pubDate>Thu, 17 Sep 2015 21:29:08 +0000</pubDate><guid>https://ruddra.com/make-a-blog-using-django-part-1/</guid><description>This post is now deprecated. Please follow the official tutorial for creating your first django application.
&amp;ldquo;Making a blog using django&amp;rdquo; - is probably the most made tutorial of Django. This post is no different. But I made this in my own way using some of django&amp;rsquo;s built-in features so that less coding is required and making it more understandable with minimum packages to use.</description></item><item><title>Syncdb vs Migration</title><link>https://ruddra.com/syncdb-vs-migration/</link><pubDate>Fri, 04 Jul 2014 17:34:00 +0000</pubDate><guid>https://ruddra.com/syncdb-vs-migration/</guid><description>While surfing through Stackoverflow, I find a common question among Django users that, database not working properly; fields attribute changed, yet not working etc. Clearly because most of them used syncdb after altering fields. Well, lets make some things clear here about django syncdb and migration.Table of contents&amp;nbsp; What is &amp;lsquo;syncdb&amp;rsquo; What is &amp;lsquo;migration&amp;rsquo; What if you mess-up in production server with &amp;lsquo;syncdb&amp;rsquo; and &amp;lsquo;migration&amp;rsquo;</description></item></channel></rss>