<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CI/CD on Ruddra</title><link>https://ruddra.com/tags/ci/cd/<description>Recent content in CI/CD on Ruddra</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://ruddra.com/tags/ci/cd/index.xml" rel="self" type="application/rss+xml"><item><title>Hugo: Deploy Static Site using GitHub Actions</title><link>https://ruddra.com/posts/hugo-deploy-static-page-using-github-actions/<pubdate>Fri, 06 Mar 2020 00:59:54 +0600</pubdate><guid>https://ruddra.com/posts/hugo-deploy-static-page-using-github-actions/</guid><description>If you are using Hugo to generate static pages, you are familiar with CLI commands which are to build the static pages in your local machine and make push to your &amp;lt;username&amp;gt;.github.io repository. When it comes to using Hugo for blogging, compared to platforms like Medium or WordPress, it is very painful because you do not have any web interface to make changes whenever you want or wherever you want.</description></item><item><title>Automated Deployment to OpenShift Using Jenkins and Webhook</title><link>https://ruddra.com/posts/openshift-python-gunicorn-nginx-jenkins-pipelines-part-three/<pubdate>Sun, 12 Aug 2018 16:45:42 +0000</pubdate><guid>https://ruddra.com/posts/openshift-python-gunicorn-nginx-jenkins-pipelines-part-three/</guid><description>The last post was about defining the pipelines. Now it is time to execute them. Also, at the end, we are going to show how to integrate webhook in your repository, so that for a specific event(like Push, Pull request merge etc) it will trigger the pipelines to automatically deploy the latest code to servers.</description></item><item><title>Writing Jenkins Pipeline For OpenShift Deployment</title><link>https://ruddra.com/posts/openshift-python-gunicorn-nginx-jenkins-pipelines-part-two/<pubdate>Sat, 11 Aug 2018 19:41:04 +0000</pubdate><guid>https://ruddra.com/posts/openshift-python-gunicorn-nginx-jenkins-pipelines-part-two/</guid><description>Pipeline is a set of instructions, which will be executed as per given sequence and produce a output. Jenkins Pipeline is simply writing these instructions in Jenkins. These pipelines can be written in Groovy. In previous post we have defined deployment structure and made necessary preparations for deployment of a python+gunicorn+nginx+jenkins based project.</description></item><item><title>Deploy A Python App to OpenShift: Planning and Preparations</title><link>https://ruddra.com/posts/openshift-python-gunicorn-nginx-jenkins-pipelines-part-one/<pubdate>Sat, 11 Aug 2018 15:09:01 +0000</pubdate><guid>https://ruddra.com/posts/openshift-python-gunicorn-nginx-jenkins-pipelines-part-one/</guid><description>Deploying a Python application to OpenShift is fairly easy. Write a Dockerfile and run oc new-app /path/to/Dockerfile, that&amp;rsquo;s it!! But if you want implement a full fledged modern CI/CD using Jenkins and openshift, you need to do little more than that. So let&amp;rsquo;s dive into it. We will explain about the whole process in three articles:</description></item><item><title>Deploy Django to OpenShift Using Jenkins Pipeline(CI/CD)</title><link>https://ruddra.com/posts/django-openshift-pipeline/<pubdate>Sun, 22 Jul 2018 17:51:20 +0000</pubdate><guid>https://ruddra.com/posts/django-openshift-pipeline/</guid><description>Using Jenkins pipeline, you can easily automate your deployments in openshift. In this post, we are going to use this powerful tool to deploy a Django project. But before we start, one thing I need to mention is that, this project has been tested on in Minishift 1.2.0, OpenShift v3.9.0 and Kubernetes v1.</description></item></channel></rss>