<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hugo on Coding Blog By Arnab Shil</title><link>https://ruddra.com/tags/hugo/</link><description>Recent content in Hugo on Coding Blog By Arnab Shil</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 29 Jan 2022 00:22:00 +0100</lastBuildDate><atom:link href="https://ruddra.com/tags/hugo/index.xml" rel="self" type="application/rss+xml"/><item><title>Add Search Functionality in Hugo</title><link>https://ruddra.com/add-search-functionality-hugo/</link><pubDate>Sat, 29 Jan 2022 00:22:00 +0100</pubDate><guid>https://ruddra.com/add-search-functionality-hugo/</guid><description>Adding search functionality make your website more accessible and usable to the stakeholders. In this article, I am going to share on how you can add this in a static site generated by hugo. Table of contents&amp;nbsp; Expose JSON output Create layout Build the search page Add lunr.js file Add search functionality Add HTML Add JavaScript In conclusion Expose JSON output In the first step, we need to expose the json output for the files.</description></item><item><title>Hugo: Get Perfect Score in Google PageSpeed</title><link>https://ruddra.com/hugo-get-perfect-pagespeed-score/</link><pubDate>Mon, 20 Jul 2020 15:53:45 +0600</pubDate><guid>https://ruddra.com/hugo-get-perfect-pagespeed-score/</guid><description>You will see many Hugo themes boast perfect scores on Google PageSpeed Insights(PSI). To be honest, most of them are not as pretty as others and lack a significant amount of JavaScript(or no JavaScript at all). But, it does not matter anymore. Because you can use any theme(or develop on your own) and get an almost perfect score in PSI if you implement the following steps.</description></item><item><title>Progressive Web App in Hugo using GitHub Actions</title><link>https://ruddra.com/hugo-implement-pwa/</link><pubDate>Sat, 20 Jun 2020 15:53:45 +0600</pubDate><guid>https://ruddra.com/hugo-implement-pwa/</guid><description>We all know or heard of Progressive Web Apps. I wanted to implement it because it enables web applications workable in offline, like a native app. Also it provides content faster by caching them.
With help of github actions and gulp, we can easily add it to a static site deployed in Github pages.</description></item><item><title>Hugo: Add Table of Contents Anywhere in Markdown File</title><link>https://ruddra.com/hugo-add-toc-anywhere/</link><pubDate>Tue, 09 Jun 2020 16:04:41 +0600</pubDate><guid>https://ruddra.com/hugo-add-toc-anywhere/</guid><description>Hugo provides a built-in module named {{ .TableOfContents }} to generate table of contents. It is pretty handy because it generates the table of content without help of any JavaScript or CSS code. But there is a problem with it, you need to put it inside templates. You can&amp;rsquo;t render it inside the contents of the markdown file.</description></item><item><title>Hugo: Use Environment Variable in Markdown Files</title><link>https://ruddra.com/hugo-use-env-variable-in-md/</link><pubDate>Fri, 03 Apr 2020 00:00:00 +0600</pubDate><guid>https://ruddra.com/hugo-use-env-variable-in-md/</guid><description>Hugo is a fantastic framework to generate static site from markdown and serve them. Using environment variables in templates is a breeze but using them in markdown files can be a bit tricky. You need to use custom shortcodes as workaround to resolve this issue. Table of contents&amp;nbsp; What is shortcodes Custom shortcodes Use environment variable in shortcodes By getenv variable By site variable In conclusion What is shortcodes Now the question comes, what is shorcode?</description></item><item><title>Hugo: Deploy Static Site using GitHub Actions</title><link>https://ruddra.com/hugo-deploy-static-page-using-github-actions/</link><pubDate>Fri, 06 Mar 2020 00:59:54 +0600</pubDate><guid>https://ruddra.com/hugo-deploy-static-page-using-github-actions/</guid><description>If you are using Hugo to generate static pages, you are familiar with CLI commands which are to build the static pages in your local machine and make push to your &amp;lt;username&amp;gt;.github.io repository. When it comes to using Hugo for blogging, compared to platforms like Medium or WordPress, it is very painful because you do not have any web interface to make changes whenever you want or wherever you want.</description></item><item><title>Implement Newsletter Subscription Using Staticman</title><link>https://ruddra.com/implement-newsletters-using-staticman/</link><pubDate>Thu, 12 Dec 2019 00:12:08 +0600</pubDate><guid>https://ruddra.com/implement-newsletters-using-staticman/</guid><description>Collecting data in static sites or serverless sites(with POST request) is a hassle because you don&amp;rsquo;t have a server to receive POST requests and store data. But Staticman is here to help. It will enable users to make POST requests, that will allow you to gather these data. In this article, I am going to tweak Staticman a little to implement newsletter subscription.</description></item><item><title>Bye Bye Ghost, Hello Hugo</title><link>https://ruddra.com/moving-to-hugo/</link><pubDate>Fri, 21 Dec 2018 23:00:00 +0000</pubDate><guid>https://ruddra.com/moving-to-hugo/</guid><description>“The Only Thing That Is Constant Is Change -” ― Heraclitus
This blog site has changed quite a lot since the begining. I initially developed it as a Django application. It was part of my learning process, and I hosted it in a private shared server.
But unfortunatly, good days came to an end, I had to give up that hosting for costing.</description></item></channel></rss>