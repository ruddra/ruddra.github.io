<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Jenkins on Coding Blog By Arnab Shil</title><link>https://ruddra.com/tags/jenkins/</link><description>Recent content in Jenkins on Coding Blog By Arnab Shil</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 12 Aug 2018 16:45:42 +0000</lastBuildDate><atom:link href="https://ruddra.com/tags/jenkins/index.xml" rel="self" type="application/rss+xml"/><item><title>Automated Deployment to OpenShift Using Jenkins and Webhook</title><link>https://ruddra.com/openshift-python-pipeline-deployment/</link><pubDate>Sun, 12 Aug 2018 16:45:42 +0000</pubDate><guid>https://ruddra.com/openshift-python-pipeline-deployment/</guid><description>The last post was about defining the pipelines. Now it is time to execute them. Also, at the end, we are going to show how to integrate webhook in your repository, so that for a specific event(like Push, Pull request merge etc) it will trigger the pipelines to automatically deploy the latest code to servers.</description></item><item><title>Writing Jenkins Pipeline For OpenShift Deployment: Part Two</title><link>https://ruddra.com/openshift-python-jenkins-pipeline-two/</link><pubDate>Sat, 11 Aug 2018 20:41:04 +0000</pubDate><guid>https://ruddra.com/openshift-python-jenkins-pipeline-two/</guid><description>In previous article, we covered step 1-5 which would prepare the code and make sure it is ready to be deployed to OpenShift. Now we are going to use the next steps to deploy that code. Table of contents&amp;nbsp; Step 6: create build configuration in OpenShift Step 7: build image Step 8: deploy to OpenShift in DEV Step 9: promote image to STAGE Step 10: deploy to OpenShift in STAGE Step 11: scale in STAGE Conclusion Step 6: create build configuration in OpenShift After Step 5, we will have a nice compressed file containing what we need for building our app in openshift.</description></item><item><title>Writing Jenkins Pipeline For OpenShift Deployment: Part One</title><link>https://ruddra.com/openshift-python-jenkins-pipeline-one/</link><pubDate>Sat, 11 Aug 2018 19:41:04 +0000</pubDate><guid>https://ruddra.com/openshift-python-jenkins-pipeline-one/</guid><description>Pipeline is a set of instructions, which will be executed as per given sequence and produce a output. Jenkins Pipeline is simply writing these instructions in Jenkins. These pipelines can be written in Groovy.
In previous post we have defined deployment structure and made necessary preparations for deployment of a python+gunicorn+nginx+jenkins based project.</description></item><item><title>Deploy A Python App to OpenShift: Planning and Preparations</title><link>https://ruddra.com/openshift-python-pipeline-preparation/</link><pubDate>Sat, 11 Aug 2018 15:09:01 +0000</pubDate><guid>https://ruddra.com/openshift-python-pipeline-preparation/</guid><description>Deploying a Python application to OpenShift is fairly easy. Write a Dockerfile and run oc new-app /path/to/Dockerfile, that&amp;rsquo;s it!! But if you want implement a full fledged modern CI/CD using Jenkins and openshift, you need to do little more than that. So let&amp;rsquo;s dive into it.
We will explain about the whole process in three articles:</description></item><item><title>Deploy Django to OpenShift Using Jenkins Pipeline(CI/CD)</title><link>https://ruddra.com/django-openshift-pipeline/</link><pubDate>Sun, 22 Jul 2018 17:51:20 +0000</pubDate><guid>https://ruddra.com/django-openshift-pipeline/</guid><description>Using Jenkins pipeline, you can easily automate your deployments in OpenShift. In this post, we are going to use this powerful tool to deploy a Django project. But before we start, one thing I need to mention is that, this project has been tested on in Minishift 1.2.0, OpenShift v3.9.0 and Kubernetes v1.</description></item></channel></rss>